for(i in raw_files){
i <- get(i) %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, i)
}
rm(raw_files, i, lpi_raw_2010, lpi_raw_2012, lpi_raw_2014, lpi_raw_2016)
lpi
View(lpi)
runApp()
lpi$Country == "C<f4>te d'Ivoire"
which(lpi$Country == "C<f4>te d'Ivoire")
which(lpi$Country %in% "d'Ivoire")
library(stringr)
str_locate(lpi$Country, "voire")
str_detect(lpi$Country, "voire")
str_detect(lpi$Country, "voire") %>% sum(.)
str_detect(lpi$Country, "voire") %>% which(.)
str_detect(lpi$Country, "Tom") %>% which(.)
lpi$Country[c(269, 394, 603)]
str_detect(lpi$Country, "voire") %>% which(.)
lpi$Country[109, 238, 389, 565]
lpi$Country[c(109, 238, 389, 565)]
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
?read.xls
?read.csv()
url <- "http://lpi.worldbank.org/sites/default/files/International_LPI_from_2007_to_2016.xlsx"
lpi_raw_2010 <- read.xls(url, sheet = 3, stringsAsFactors = FALSE) %>% mutate(Year = 2010)
str(lpi_raw_2010)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
iris
runApp()
runApp()
?leaflet
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
?crosslet
library(rMaps)
?rMaps
help(package = "rMaps")
install.packages("googleVis")
library(googleVis)
G <- gvisGeoChart(Exports, "Country", "Profit",
options=list(width=300, height=300))
T <- gvisTable(Exports,
options=list(width=220, height=300))
GT <- gvisMerge(G,T, horizontal=TRUE)
plot(GT)
Exports
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
data.poly <- as.data.frame(polygons)
data.poly <- data.poly[,c(5,12)]
names(data.poly) <- c("Country Name","CO2 emissions (metric tons per capita)")
Leaflet(data = lpi)
Leaflet()
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
library(leaflet)
leaflet()
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
leaflet() %>%
setView(lng = -71.0589, lat = 42.3601, zoom = 0)
leaflet() %>%
setView(lng = -71.0589, lat = 42.3601, zoom = 1)
leaflet() %>%
setView(lng = -71.0589, lat = 42.3601, zoom = 1)  %>%
addTiles()
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
Exports
lpi
View(lpi)
G <- gvisGeoChart(Exports, "Country", "Profit",
options=list(width=300, height=300))
T <- gvisTable(Exports,
options=list(width=220, height=300))
GT <- gvisMerge(G,T, horizontal=TRUE)
plot(GT)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"),
width=600, height=400))
plot(Geo)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"),
width=1000, height=1000))
plot(Geo)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"),
width=5000, height=1000))
plot(Geo)
View(lpi)
names(lpi)
Geo=gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(projection="kavrayskiy-vii"),
width=5000, height=1000))
plot(Geo)
?gvisGeoChart
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(projection="kavrayskiy-vii",
width="500px", height="300px"),
)
lpi$Country[603]
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
rm(lpi)
lpi <- readRDS("data/lpi.rds")
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
lpi$Country[c(269, 394, 603)] <- "Sco Tomi and Principe"
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(projection="kavrayskiy-vii",
width="500px", height="300px"),
)
plot(Geo)
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(projection="kavrayskiy-vii",
width="1000px", height="500px"),
)
plot(Geo)
runApp()
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(width="1000px", height="500px"),
)
plot(Geo)
runApp()
shiny::runApp()
?gvisGeoChart
str(Geo)
library(googleVis)
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(width="1000px", height="500px"),
)
plot(Geo)
gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(width="1000px", height="500px")
)
lpi <- readRDS("data/lpi.rds")
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(width="1000px", height="500px")
)
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(width="1000px", height="500px"),
)
gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score"
)
lpi$Country[c(269, 394, 603)] <- "Sco Tomi and Principe"
lpi <- readRDS("data/lpi.rds")
# clean up non-UTF-8 characters
#str_detect(lpi$Country, "voire") %>% which(.)
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
#str_detect(lpi$Country, "Tom") %>% which(.)
lpi$Country[c(269, 394, 603)] <- "Sco Tomi and Principe"
Geo <- gvisGeoChart(lpi, locationvar="Country",
colorvar="Overall LPI Score",
options=list(width="1000px", height="500px"),
)
str(Geo)
Geo$html
plot(Geo)
Geo$html$chart
plot(Geo)
plot(Geo)
https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
head(df)
head(lpi)
library(plotly)
install.packages("plotly")
library(plotly)
?plot_ly
l <- list(color = toRGB("grey"), width = 0.5)
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
plot_ly(lpi, z = `Overall LPI Score`, text = Country, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(lpi, z = `Overall LPI Score`, text = Country, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$'))
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Country, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$'))
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Country, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Country, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
unique(lpi)
unique(lpi$Country)
library(leaflet)
library(leaflet)
leaflet() %>%
addTiles()
?leaflet
head(lpi)
library(gdata)
library(dplyr)
library(magrittr)
rm(list = ls())
url <- "http://lpi.worldbank.org/sites/default/files/International_LPI_from_2007_to_2016.xlsx"
lpi_raw_2010 <- read.xls(url, sheet = 3) %>% mutate(Year = 2010)
head(lpi_raw_2010)
lpi_raw_2012 <- read.xls(url, sheet = 2) %>% mutate(Year = 2012)
lpi_raw_2014 <- read.xls(url, sheet = 1) %>% mutate(Year = 2014)
lpi_raw_2016 <- read.xls(url, sheet = 5) %>% mutate(Year = 2016)
head(lpi_raw_2012)
str(lpi_raw_2014)
View(lpi_raw_2014)
View(lpi_raw_2016)
names(lpi_raw_2010[,2])
names(lpi_raw_2010)
names(lpi_raw_2010)[2]
names(lpi_raw_2010) == "X.1"
names(lpi_raw_2010[names(lpi_raw_2010) == "X.1"]
names(lpi_raw_2010[names(lpi_raw_2010) == "X.1"])
names(lpi_raw_2010[names(lpi_raw_2010) == "X.1"]) <- "Code"
names(lpi_raw_2010)
names(lpi_raw_2010) == "X.1"
names(lpi_raw_2010)[2] <- "Code"
names(lpi_raw_2010)
rm(url)
raw_files <- ls()
lpi <- data.frame(NULL)
for(i in raw_files){
i <- get(i) %>%
names(.)[2] <- "Code"
i <- i %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, i)
}
get(i) %>%
names(.)[2]
raw_files <- ls()
lpi <- data.frame(NULL)
for(i in raw_files){
i <- get(i)
names(i)[2] <- "Code"
i <- i %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, i)
}
names(i)[2]
raw_files <- ls()
lpi <- data.frame(NULL)
rm(i, raw_files, lpi)
raw_files <- ls()
lpi <- data.frame(NULL)
raw_files[1]
get(raw_files[1])
i <- get(raw_files[1])
names(i)[2] <- "Code"
head(i)
i %>%
.[-1, ]
i %>%
.[-1, ] %>%
select(-contains("x."))
i <- i %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, i)
rm(i, lpi, raw_files)
raw_files <- ls()
lpi <- data.frame(NULL)
for(i in raw_files){
j <- get(i)
names(j)[2] <- "Code"
j <- j %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, j)
}
rm(raw_files, i, j, lpi_raw_2010, lpi_raw_2012, lpi_raw_2014, lpi_raw_2016)
head(lpi)
rm(lpi)
url <- "http://lpi.worldbank.org/sites/default/files/International_LPI_from_2007_to_2016.xlsx"
lpi_raw_2010 <- read.xls(url, sheet = 3) %>% mutate(Year = 2010)
lpi_raw_2012 <- read.xls(url, sheet = 2) %>% mutate(Year = 2012)
lpi_raw_2014 <- read.xls(url, sheet = 1) %>% mutate(Year = 2014)
lpi_raw_2016 <- read.xls(url, sheet = 5) %>% mutate(Year = 2016)
rm(url)
# tidy and combine
raw_files <- ls()
lpi <- data.frame(NULL)
for(i in raw_files){
j <- get(i)
names(j)[2] <- "Code"
j <- j %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Code", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, j)
}
rm(raw_files, i, j, lpi_raw_2010, lpi_raw_2012, lpi_raw_2014, lpi_raw_2016)
lpi$Country[c(109, 238, 389, 565)]
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
str(lpi)
lpi$Country <- as.character(lpi$Country)
lpi$Country[c(109, 238, 389, 565)]
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
lpi$Country[c(109, 238, 389, 565)]
lpi$Country[c(269, 394, 603)]
lpi$Country[c(269, 394, 603)] <- "Sco Tomi and Principe"
write.csv(lpi, "data/lpi.csv", row.names = FALSE)
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
View(lpi)
rm(list = ls())
lpi <- readRDS("data/lpi.rds")
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
saveRDS(lpi, file = "data/lpi.rds")
rm(list = ls())
lpi <- readRDS("data/lpi.rds")
head(lpi)
?saveRDS
rm(lpi)
url <- "http://lpi.worldbank.org/sites/default/files/International_LPI_from_2007_to_2016.xlsx"
lpi_raw_2010 <- read.xls(url, sheet = 3) %>% mutate(Year = 2010)
lpi_raw_2012 <- read.xls(url, sheet = 2) %>% mutate(Year = 2012)
lpi_raw_2014 <- read.xls(url, sheet = 1) %>% mutate(Year = 2014)
lpi_raw_2016 <- read.xls(url, sheet = 5) %>% mutate(Year = 2016)
rm(url)
# tidy and combine
raw_files <- ls()
lpi <- data.frame(NULL)
for(i in raw_files){
j <- get(i)
names(j)[2] <- "Code"
j <- j %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Code", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, j)
}
rm(raw_files, i, j, lpi_raw_2010, lpi_raw_2012, lpi_raw_2014, lpi_raw_2016)
# clean up non-UTF-8 characters
lpi$Country <- as.character(lpi$Country)
#str_detect(lpi$Country, "voire") %>% which(.)
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
#str_detect(lpi$Country, "Tom") %>% which(.)
lpi$Country[c(269, 394, 603)] <- "Sco Tomi and Principe"
saveRDS(lpi, file = "data/lpi.rds")
lpi <- readRDS("data/lpi.rds")
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
?color
?plot_ly
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
str(df)
str(lpi)
lpi <- read_csv("data/lpi.csv")
str(lpi)
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(title = 'LPI Score')) %>%
layout(title = 'Global Logistics Performance Index',
geo = g)
runApp()
?plot_ly
runApp()
Geo <- plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(title = 'LPI Score')) %>%
layout(title = 'Global Logistics Performance Index',
geo = g)
plot(Geo)
runApp()
runApp()
runApp()
runApp()
install.packages("ggplot2movies")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("radarchart")
