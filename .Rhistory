runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(lpi)
names(lpi)[,3:10]
names(lpi)[,c(3:10)]
names(lpi)[3:10]
runApp()
runApp()
runApp()
head(lpi)
lpi <- read_csv("data/lpi.csv")
head(lpi)
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year)
metric <- "Overall LPI Score"
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric)
year <- 2016
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric & Year == year) %>%
arrange(desc(Score)) %>%
mutate(Rank = seq(1, length(Country), by = 1))
runApp()
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric & Year == year) %>%
arrange(desc(Score)) %>%
mutate(Rank = seq(1, length(Country), by = 1)) %>%
select(-Year)
runApp()
runApp()
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric) %>%
group_by(Country)
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric) %>%
group_by(Country) %>%
summarise(Score = mean(Score, na.rm = TRUE)) %>%
arrange(desc(Score)) %>%
mutate(Rank = seq(1, length(Country), by = 1)) %>%
select(-Year)
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric) %>%
group_by(Country) %>%
summarise(Score = mean(Score, na.rm = TRUE)) %>%
arrange(desc(Score)) %>%
mutate(Rank = seq(1, length(Country), by = 1))
runApp()
runApp()
runApp()
runApp()
runApp()
lpi
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
lpi <- read_csv("data/lpi.csv")
metric <- `Overall LPI Score`
metric <- "Overall LPI Score"
year <- 2016
lpi %>%
gather(Metric, Score, -Country, -Code, -Year)
lpi %>%
filter(Metric == metric & Year == year)
runApp()
runApp()
lpi %>%
filter(Year == year)
runApp()
runApp()
runApp()
runApp()
map_df <- lpi %>%
filter(Year == year)
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_ly(map_df, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = input$metric, colors = 'Blues', marker = list(line = l),
colorbar = list(title = 'LPI Score')) %>%
layout(title = 'Global Logistics Performance Index',
geo = g)
runApp()
?plot_ly
library(rgdal)
# From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
countries <- readOGR("json/countries.geojson", "OGRGeoJSON")
install.packages("rgdal")
library(rgdal)
# From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
countries <- readOGR("json/countries.geojson", "OGRGeoJSON")
countries <- readOGR("json/countries.geojson", "OGRGeoJSON")
leaflet() %>%
addTiles()
library(leaflet)
leaflet() %>%
addTiles()
leaflet(lpi) %>%
addTiles()
countries <- readOGR("https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson", "OGRGeoJSON")
head(countries)
str(countries)
leaflet(countries) %>%
addTiles()
plot_ly(lpi, z = `Overall LPI Score`, text = Country, locations = Code, type = 'choropleth',
color = `Overall LPI Score`, colors = 'Blues', marker = list(line = l),
colorbar = list(title = 'LPI Score')) %>%
layout(title = 'Global Logistics Performance Index',
geo = g)
runApp()
map_df
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
country <- "Overall LPI Score"
df <- lpi %>%
filter(Country == country & Year %in% year) %>%
select(-Code, -`Overall LPI Rank`, -Country) %>%
gather(Label, Value, -Year) %>%
spread(Year, Value) %>%
mutate(Label = factor(df$Label, levels = c("Overall LPI Score", "Customs", "Infrastructure",
"International Shipments", "Logistics Quality & Competence",
"Tracking & Tracing", "Timeliness"))) %>%
arrange(Label)
lpi %>%
filter(Country == country & Year %in% year)
head(lpi)
country <- "Germany"
lpi %>%
filter(Country == country & Year %in% year)
lpi %>%
filter(Country == country & Year %in% year) %>%
select(-Code, -`Overall LPI Rank`, -Country)
lpi %>%
filter(Country == country & Year %in% year) %>%
select(-Code, -`Overall LPI Rank`, -Country) %>%
gather(Label, Value, -Year) %>%
spread(Year, Value) %>%
mutate(Label = factor(df$Label, levels = c("Overall LPI Score", "Customs", "Infrastructure",
"International Shipments", "Logistics Quality & Competence",
"Tracking & Tracing", "Timeliness"))) %>%
arrange(Label)
lpi %>%
filter(Country == country & Year %in% year) %>%
select(-Code, -`Overall LPI Rank`, -Country) %>%
gather(Label, Value, -Year) %>%
spread(Year, Value)
lpi %>%
filter(Country == country & Year %in% year) %>%
select(-Code, -`Overall LPI Rank`, -Country) %>%
gather(Label, Value, -Year) %>%
spread(Year, Value) %>%
mutate(Label = factor(df$Label, levels = c("Overall LPI Score", "Customs", "Infrastructure",
"International Shipments", "Logistics Quality & Competence",
"Tracking & Tracing", "Timeliness")))
lpi %>%
filter(Country == country & Year %in% year) %>%
select(-Code, -`Overall LPI Rank`, -Country) %>%
gather(Label, Value, -Year) %>%
spread(Year, Value) %>%
mutate(Label = factor(.$Label, levels = c("Overall LPI Score", "Customs", "Infrastructure",
"International Shipments", "Logistics Quality & Competence",
"Tracking & Tracing", "Timeliness"))) %>%
arrange(Label)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lpi
df %>%
filter(Year == year) %>%
select_(year)
df %>%
filter(Year == year)
library(dplyr)
df %>%
filter(Year == year)
runApp()
runApp()
runApp()
runApp()
lpi
runApp()
runApp()
which(names(lpi) == metric)
lpi
runApp()
library(magrittr)
runApp()
runApp()
runApp()
c(1, 2, which(names(lpi) == metric))
columns <- c(1, 2, which(names(lpi) == metric))
c(columns, "Year")
c(columns, which(names(lpi) == Year))
c(columns, which(names(lpi) == "Year"))
runApp()
columns <- c(columns, which(names(lpi) == "Year"))
map_df <- lpi[, columns]
map_df
names(map_df) <- c("Country", "Code", "Metric", "Year")
map_df
map_df %>%
group_by(Country, Code)
map_df %>%
group_by(Country, Code) %>%
summarise(Metric = mean(Metric, na.rm=TRUE))
runApp()
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric) %>%
group_by(Country, Metric) %>%
summarise(Score = round(mean(Score, na.rm = TRUE), 2)) %>%
arrange(desc(Score))
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric) %>%
group_by(Country, Metric) %>%
summarise(Score = round(mean(Score, na.rm = TRUE), 2)) %>%
arrange(desc(Score)) %>%
mutate(Rank = seq(1, length(Country), by = 1))
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric & Year == year) %>%
arrange(desc(Score)) %>%
mutate(Score = round(Score, 2),
Rank = seq(1, length(Country), by = 1)) %>%
select(-Year)
lpi %>%
select(-Code) %>%
gather(Metric, Score, -Country, -Year) %>%
filter(Metric == metric) %>%
group_by(Country, Metric) %>%
summarise(Score = round(mean(Score, na.rm = TRUE), 2)) %>%
ungroup() %>%
arrange(desc(Score)) %>%
mutate(Rank = seq(1, length(Country), by = 1))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lpi[lpi$Year == year, columns]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
df
lpi
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lpi <- read_csv("data/lpi.csv")
head(lpi)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
metric <- "Overall LPI Score"
year <- 2016
map_df <- lpi[lpi$Year == year, columns]
columns <- c(1, 2, which(names(lpi) == metric))
map_df <- lpi[lpi$Year == year, columns]
head(map_df)
names(map_df) <- c("Country", "Code", "Metric")
map_df
Code2 <- map_df[1,2]
Code2
Code2 <- map_df[[1,2]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lpi
runApp()
runApp()
runApp()
rm(list = ls())
library(gdata)
library(dplyr)
library(magrittr)
library(stringr)
url <- "http://lpi.worldbank.org/sites/default/files/International_LPI_from_2007_to_2016.xlsx"
lpi_raw_2010 <- read.xls(url, sheet = 3) %>% mutate(Year = 2010)
lpi_raw_2012 <- read.xls(url, sheet = 2) %>% mutate(Year = 2012)
lpi_raw_2014 <- read.xls(url, sheet = 1) %>% mutate(Year = 2014)
lpi_raw_2016 <- read.xls(url, sheet = 5) %>% mutate(Year = 2016)
rm(url)
# tidy and combine
raw_files <- ls()
lpi <- data.frame(NULL)
for(i in raw_files){
j <- get(i)
names(j)[2] <- "Code"
j <- j %>%
.[-1, ] %>%
select(-contains("x.")) %>%
set_colnames(c("Country", "Code", "Overall LPI Score", "Overall LPI Rank",
"Customs", "Infrastructure", "International Shipments",
"Logistics Quality & Competence", "Tracking & Tracing",
"Timeliness", "Year"))
lpi <- rbind(lpi, j)
}
rm(raw_files, i, j, lpi_raw_2010, lpi_raw_2012, lpi_raw_2014, lpi_raw_2016)
# clean up non-UTF-8 characters
lpi$Country <- as.character(lpi$Country)
lpi$Country[c(109, 238, 389, 565)] <- "Cote d Ivoire"
lpi$Country[c(269, 394, 603)] <- "Sco Tomi and Principe"
lpi$Country[lpi$Country == "Congo, Dem. Rep,"]
View(lpi)
lpi$Country[lpi$Country == "Congo, Dem, Rep,"]
lpi$Country[lpi$Country == "Congo, Dem, Rep,"] <- "Congo, Dem. Rep."
lpi$Country[lpi$Country == "Congo, Rep,"] <- "Congo, Rep."
lpi$Country[lpi$Country == "Egypt, Arab Rep,"] <- "Egypt, Arab Rep."
lpi$Country[lpi$Country == "Hong Kong SAR, China"] <- "Hong Kong China"
lpi$Country[lpi$Country == "Iran, Islamic Rep,"] <- "Iran, Islamic Rep."
lpi$Country[lpi$Country == "Korea, Rep,"] <- "Korea Rep."
lpi$Country[lpi$Country == "Taiwan, China"] <- "Taiwan"
write.csv(lpi, "data/lpi.csv", row.names = FALSE)
saveRDS(lpi, file = "data/lpi.rds")
runApp()
lpi$Country[lpi$Country == "Hong Kong, China"]
lpi$Country[lpi$Country == "Hong Kong, China"] <- "Hong Kong China"
View(lpi)
unique(lpi$Country)
order(unique(lpi$Country))
arrange(unique(lpi$Country))
sort(unique(lpi$Country))
write.csv(lpi, "data/lpi.csv", row.names = FALSE)
saveRDS(lpi, file = "data/lpi.rds")
runApp()
lpi$Country[lpi$Country == "Korea Rep,"]
lpi$Country[lpi$Country == "Korea Rep."]
lpi$Country[lpi$Country == "Korea, Rep,"]
View(lpi)
lpi$Country[lpi$Country == "Korea Rep."]
lpi$Country[lpi$Country == "Korea Rep."] <- "Korea, Rep."
sort(unique(lpi$Country))
write.csv(lpi, "data/lpi.csv", row.names = FALSE)
saveRDS(lpi, file = "data/lpi.rds")
runApp()
runApp()
runApp()
