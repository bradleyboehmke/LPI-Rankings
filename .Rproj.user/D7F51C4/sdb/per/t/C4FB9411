{
    "collab_server" : "",
    "contents" : "library(readr)\nlibrary(plotly)\nlibrary(radarchart)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(DT)\nlibrary(radarchart)\nlibrary(magrittr)\n\nlpi <- read_csv(\"data/lpi.csv\")\n\n\n\n\nshinyServer(function(input, output) {\n        \n        # Title for map on first tab\n        output$mapTitle <- renderText({\n                metric <- input$metric\n                heading <- paste(\"Global LPI Benchmarking:\", \"<br>\", input$metric)\n                HTML(paste(heading))\n        })\n        \n        # Map on first tab\n        output$trendPlot <- renderPlotly({\n                \n                # filter for metric\n                metric <- input$metric\n                year <- input$range\n                \n                columns <- c(1, 2, which(names(lpi) == metric))\n                \n                if(year != \"Average\"){\n                        map_df <- lpi[lpi$Year == year, columns]\n                        names(map_df) <- c(\"Country\", \"Code\", \"Metric\")\n                } else{\n                        columns <- c(columns, which(names(lpi) == \"Year\"))\n                        map_df <- lpi[, columns]\n                        names(map_df) <- c(\"Country\", \"Code\", \"Metric\", \"Year\")\n                        \n                        map_df <- map_df %>%\n                                group_by(Country, Code) %>%\n                                summarise(Metric = mean(Metric, na.rm=TRUE))\n                }\n                \n                l <- list(color = toRGB(\"grey\"), width = 0.5)\n                \n                # specify map projection/options\n                g <- list(\n                        showframe = FALSE,\n                        showcoastlines = FALSE,\n                        projection = list(type = 'equirectangular', scale = 1.2)\n                )\n                \n                plot_ly(map_df, z = Metric, text = Country, locations = Code, type = 'choropleth',\n                        color = Metric, colors = 'Blues', marker = list(line = l),\n                        colorbar = list(title = 'LPI Score', len = .4, thickness = 20, xpad = 0, ypad = 0, x = 1.05)) %>%\n                        layout(geo = g)\n                \n\n        })\n        \n        # Description on first tab\n        output$mapDesc <- renderText({\n                \n                metric <- input$metric\n                year <- input$range\n                \n                columns <- c(1, 2, which(names(lpi) == metric))\n                \n                if(year != \"Average\"){\n                        map_df <- lpi[lpi$Year == year, columns]\n                        names(map_df) <- c(\"Country\", \"Code\", \"Metric\")\n                        map_df <- arrange(map_df, desc(Metric))\n                        \n                        country <- map_df[[1, 1]]\n                        score <- round(map_df[[1, 3]], 2)\n                        number <- length(unique(map_df$Country))\n                        \n                        desc <- paste(\"In\", input$range ,paste0(\"<font size='3' color='blue'>\",\"<b>\",country,\"</b>\",\"</font>\"), \"ranked\", paste0(\"<font size='3' color='blue'>\",\"1\", \"<sup>\", \"st\", \"</sup>\", \"</font>\"), \"out of\", number, \"countries in\", paste0(\"<em>\", input$metric, \"</em>\", \".\"), \"See how other countries have ranked below.\")\n                        HTML(paste(desc))\n                        \n                        \n                } else{\n                        columns <- c(columns, which(names(lpi) == \"Year\"))\n                        map_df <- lpi[, columns]\n                        names(map_df) <- c(\"Country\", \"Code\", \"Metric\", \"Year\")\n                        \n                        map_df <- map_df %>%\n                                group_by(Country, Code) %>%\n                                summarise(Metric = mean(Metric, na.rm=TRUE)) %>%\n                                arrange(desc(Metric))\n                        \n                        country <- map_df[[1, 1]]\n                        score <- round(map_df[[1, 3]], 2)\n                        number <- length(unique(map_df$Country))\n                        \n                        desc <- paste(\"Since 2010\", paste0(\"<font size='3' color='blue'>\",\"<b>\",country,\"</b>\",\"</font>\"), \"has ranked\", paste0(\"<font size='3' color='blue'>\",\"1\", \"<sup>\", \"st\", \"</sup>\", \"</font>\"), \"out of\", number, \"countries in\", paste0(\"<em>\", input$metric, \"</em>\", \".\"), \"See how other countries have ranked below.\")\n                        HTML(paste(desc))\n                }\n                \n\n        })\n        \n\n        # Table on first tab\n        output$mapTable <- renderDataTable({\n               \n                # filter for metric\n                metric <- input$metric\n                year <- input$range\n                \n                if(input$alldata == TRUE){\n                        map_table <- lpi %>%\n                        select(-Code, -`Overall LPI Rank`) %>%\n                                gather(Metric, Score, -Country, -Year)\n                        \n                        caption <- \"All Underlying Data\"\n                        \n                } else if(year == \"Average\"){\n                        map_table <- lpi %>%\n                                select(-Code) %>%\n                                gather(Metric, Score, -Country, -Year) %>%\n                                filter(Metric == metric) %>%\n                                group_by(Country, Metric) %>%\n                                summarise(Score = round(mean(Score, na.rm = TRUE), 2)) %>%\n                                ungroup() %>%\n                                arrange(desc(Score)) %>%\n                                mutate(Rank = seq(1, length(Country), by = 1))\n                        caption <- paste(\"Average Country Rankings for the\", input$metric, \"Metric for 2010-2016\")\n                } else {\n                        map_table <- lpi %>%\n                                select(-Code) %>%\n                                gather(Metric, Score, -Country, -Year) %>%\n                                filter(Metric == metric & Year == year) %>%\n                                arrange(desc(Score)) %>%\n                                mutate(Score = round(Score, 2),\n                                       Rank = seq(1, length(Country), by = 1)) %>%\n                                select(-Year)\n                        \n                        caption <- paste(\"Country Rankings for the\", input$metric, \"Metric in\", input$range)\n                }\n                \n                DT::datatable(map_table, rownames = FALSE, \n                              caption = htmltools::tags$caption(\n                                      style = 'text-align: center;', caption\n                              ))\n        })\n        \n        output$downloadData <- downloadHandler(\n                \n                filename = function() {\n                        if(input$alldata == TRUE){\n                                paste('all-lpi-data-', '.csv', sep = '')\n                        } else if(input$range == \"Average\"){\n                                paste(input$metric, '-historical-average', '.csv', sep = '')\n                        } else {\n                                paste(input$metric, '-', input$range, '.csv', sep = '')\n                        }\n                        \n                },\n                \n                content = function(file) {\n                        \n                        # filter for metric\n                        metric <- input$metric\n                        year <- input$range\n                        \n                        if(input$alldata == TRUE){\n                                download_table <- lpi %>%\n                                        select(-Code, -`Overall LPI Rank`) %>%\n                                        gather(Metric, Score, -Country, -Year)\n                                \n                        } else if(year == \"Average\"){\n                                download_table <- lpi %>%\n                                        select(-Code) %>%\n                                        gather(Metric, Score, -Country, -Year) %>%\n                                        filter(Metric == metric) %>%\n                                        group_by(Country, Metric) %>%\n                                        summarise(Score = round(mean(Score, na.rm = TRUE), 2)) %>%\n                                        ungroup() %>%\n                                        arrange(desc(Score)) %>%\n                                        mutate(Rank = seq(1, length(Country), by = 1))\n                                \n                        } else {\n                                download_table <- lpi %>%\n                                        select(-Code) %>%\n                                        gather(Metric, Score, -Country, -Year) %>%\n                                        filter(Metric == metric & Year == year) %>%\n                                        arrange(desc(Score)) %>%\n                                        mutate(Score = round(Score, 2),\n                                               Rank = seq(1, length(Country), by = 1)) %>%\n                                        select(-Year)\n                                \n                               \n                        }\n                        \n                        write.csv(download_table, file)\n                }\n        )\n        \n        # Title for radar plot on second tab\n        output$radarTitle <- renderText({\n                heading <- paste(\"Country Scorecard:\", \"<br>\", input$country)\n                HTML(paste(heading))\n        })\n        \n        # Radar plot on second tab\n        output$radarPlot <- renderChartJSRadar({\n                \n                # filter country & year\n                country <- input$country\n                year <- input$selectedYears\n                \n                df <- lpi %>%\n                        filter(Country == country & Year %in% year) %>%\n                        select(-Code, -`Overall LPI Rank`, -Country) %>%\n                        gather(Label, Value, -Year) %>%\n                        spread(Year, Value) %>%\n                        mutate(Label = factor(.$Label, levels = c(\"Overall LPI Score\", \"Customs\", \"Infrastructure\", \n                                                                   \"International Shipments\", \"Logistics Quality & Competence\", \n                                                                   \"Tracking & Tracing\", \"Timeliness\"))) %>%\n                        arrange(Label)\n                \n                chartJSRadar(df, maxScale = 5, showToolTipLabel = TRUE, title = \"test\")\n        })\n        \n        \n        \n        # Table on second tab\n        output$radarDesc <- renderText({\n                # create ranking\n                country <- input$country\n                \n                avg <- lpi %>%\n                        group_by(Country) %>%\n                        summarise(Overall = mean(`Overall LPI Score`, na.rm = TRUE)) %>%\n                        arrange(desc(Overall)) %>%\n                        mutate(Rank = seq(1, length(Country), by =1)) %>%\n                        filter(Country == country)\n                \n                rank <- avg[[1, 3]]\n                score <- round(avg[[1, 2]], 2)\n                number <- length(unique(lpi$Country))\n                \n                sup <- if(substr(rank, nchar(rank), nchar(rank)) == 1){\n                        \"st\"\n                } else if(substr(rank, nchar(rank), nchar(rank)) == 2){\n                        \"nd\"\n                } else if(substr(rank, nchar(rank), nchar(rank)) == 3){\n                        \"rd\"\n                } else{\n                        \"th\"\n                }\n                \n                paste0(\"<b>\",rank,\"</b>\",\"th\")\n                \n                desc <- paste(\"Since 2010 the average Overall LPI Score for\", input$country, \"has been\", paste0(\"<font size='3' color='blue'>\",\"<b>\",score,\"</b>\",\"</font>\",\",\"), \"placing them\" , paste0(\"<font size='3' color='blue'>\",\"<b>\",rank,\"<sup>\",sup,\"</sup>\",\"</b>\",\"</font>\"), \"out of\", number, \"countries. See how they have historically ranked across all metrics below.\")\n                HTML(paste(desc))\n        })\n        \n        output$radarTable <- renderDataTable({\n                \n                country <- input$country\n                \n                rank_table <- lpi %>%\n                        group_by(Year) %>%\n                        mutate(`Overall LPI` = `Overall LPI Rank`) %>%\n                        arrange(desc(Customs)) %>%\n                        mutate(Customs = seq(1, length(Country))) %>%\n                        arrange(desc(Infrastructure)) %>%\n                        mutate(Infrastructure = seq(1, length(Country))) %>%\n                        arrange(desc(`International Shipments`)) %>%\n                        mutate(`International Shipments` = seq(1, length(Country))) %>%\n                        arrange(desc(`Logistics Quality & Competence`)) %>%\n                        mutate(`Logistics Quality & Competence` = seq(1, length(Country))) %>%\n                        arrange(desc(`Tracking & Tracing`)) %>%\n                        mutate(`Tracking & Tracing` = seq(1, length(Country))) %>%\n                        arrange(desc(Timeliness)) %>%\n                        mutate(Timeliness = seq(1, length(Country))) %>%\n                        select(-Code, -`Overall LPI Score`, -`Overall LPI Rank`) %>%\n                        gather(Metric, Score, -Country, -Year) %>%\n                        spread(Year, Score) %>%\n                        mutate(Metric = factor(.$Metric, levels = c(\"Overall LPI\", \"Customs\", \"Infrastructure\",\n                                                                    \"International Shipments\", \"Logistics Quality & Competence\",\n                                                                    \"Tracking & Tracing\", \"Timeliness\"))) %>%\n                        arrange(Metric)\n                \n                country_table <- rank_table %>%\n                        filter(Country == country) %>%\n                        select(-Country)\n                \n                caption <- paste(\"Metric Rankings by Year for\", input$country)\n                \n                DT::datatable(country_table, rownames = FALSE, \n                              caption = htmltools::tags$caption(\n                                      style = 'text-align: center;', caption\n                              ),\n                              options = list(dom = 't'))\n        })\n        \n        \n})",
    "created" : 1468980022702.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "871600987",
    "id" : "C4FB9411",
    "lastKnownWriteTime" : 1469723800,
    "last_content_update" : 1469723800966,
    "path" : "~/Desktop/Personal/Academia/LPI Rankings/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}